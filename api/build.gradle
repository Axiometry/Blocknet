apply plugin: 'scala'
apply plugin: 'eclipse'

sourceCompatibility = 1.8
version = '1.0'

repositories {
	mavenCentral()
	mavenLocal()
}

dependencies {
	/* Scala    */ compile(group: 'org.scala-lang',    name: 'scala-library',   version: '2.11.4')
	/* Scopt    */ compile(group: 'com.github.scopt',  name: 'scopt_2.11',      version: '3.2.0')
	/* XML      */ compile(group: 'org.scala-lang',    name: 'scala-xml',       version: '2.11.0-M4')
	/* Akka     */ compile(group: 'com.typesafe.akka', name: 'akka-actor_2.11', version: '2.3.8')
	/* RxScala  */ compile(group: 'io.reactivex',      name: 'rxscala_2.11',    version: '0.24.1')
	
	/* ScalaTest */ testCompile(group: 'org.scalatest', name: 'scalatest_2.11',                   version: '2.2.0')
	/* ScalaMock */ testCompile(group: 'org.scalamock', name: 'scalamock-scalatest-support_2.11', version: '3.1.4')
}

eclipse {
	classpath {
		downloadSources = true
		
		def containerTargets = [
			'jre': [
				'has': true,
				'matcher': { entry -> entry.kind == 'con' && entry.path.contains('JRE_CONTAINER') },
				'container': 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
			],
			'scala': [
				'has': true,
				'matcher': { entry -> entry.kind == 'con' && entry.path.contains('SCALA_CONTAINER') },
				'container': 'org.scala-ide.sdt.launching.SCALA_CONTAINER'
			]
		]
		
		containers.clear()
		
		file.beforeMerged { classpath ->
			containerTargets.entrySet().each {
				if(!classpath.entries.find(it.value['matcher'])) {
					containers.add(it.value['container'])
					it.value['has'] = false
				}
			}
		}
		
		file.whenMerged { classpath ->
			containerTargets.entrySet().each {
				if(!it.value['has'])
					classpath.entries.findAll(it.value['matcher'])*.exported = false
			}
		}
	}
}
